A project is either single-allocation or multi-allocation.
In the latter case the allocations are to apps within the project.

An "allocation target" (AT) is either a project or an app.

An "allocation" consists of
- an initial balance
- the rate of balance accrual
- the interval of balance accrual
where "balance" is in terms of FLOPs

SU serves as a meta-scheduler.

It keeps track of targets, allocations, balances, host assignments.

?? should allocation usage be measured by host/time,
or by work actually done (credit)?
Note: should work in a reasonable way even if jobs are very long

?? what if SU assigns a host to a project, and the project doesn't have work?
	SU should work in a reasonable way for sporadic workloads

-----------
Accounting
goals:
maintain daily history for
	total (su_accounting):
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# jobs success
		# jobs fail
			This above are updated by AM RPC.
			They can be reconstructed from either of the following tables
		# active hosts
		# active hosts w/ usable GPU
		# active users
			The above are computed based on last RPC time within a week
			user.expavg_time is used to store the last RPC time

	project (su_accounting_project):
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# jobs success
		# jobs fail
	user (su_accounting_user):
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# jobs success
		# jobs fail

		Records are created by the AM RPC
		(avoid creating records for users who never do work)
		and are copied only for periods when work has been done

maintain per host (no history)
	boinc_client_version
	has usable GPU
	p_vm_extensions_disabled
	vbox_version
		(should add the above to standard code)

	CPU flops total
	CPU time total
	GPU flops total
	GPU time total
	# jobs success
	# jobs fail
		(the above are used to compute deltas, and also to show totals)

client changes:
	maintain
		per project
			total CPU and GPU time
			total CPU and GPU flops
				(take CPU throttling into account)
			# jobs success, fail
	report these in AM RPC
	report has usable GPU

Note: for convenience, flops is always measured in EC units

AM RPC handler
	compute deltas (relative to host record)
	sanity-check deltas
		time: #instances x dt
		flops: same, times fastest possible device (100 GFLOPS *256 CPU, 100 TFLOPS*8 GPU)
	update host record
	create accounting_user record if none
	atomically update delta, total fields of most recent account records for total, project, host

daily accounting program
	create new records for total, project, user
		new.delta = 0
		new.total = old.total + old.delta
	for total:
		compute # active hosts based on last RPC time
		group by userid to get # active users
		update # hosts w/ usable GPU

-------------

web interfaces

user
	home page
		totals
		recent history of ec
		link to more histories
		link to host list
		link to project list
		prefs; link to edit

	host list
		name, info, cpu_ec, cpu_time, njobs etc
		linked to detail
	host detail
		the above plus
		project list
			project name
			last RPC
			cpu time, njobs etc.
	project list
		table: name, CPU ec etc.
	histories
		table cols for (CPU time, ec, etc.)
			first row: total
			rows: delta per day

manager
	project list
		totals cpu_ec, njobs etc.
	project detail
		totals
		per day
			deltas
