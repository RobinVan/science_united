A project is either single-allocation or multi-allocation.
In the latter case the allocations are to apps within the project.

An "allocation target" (AT) is either a project or an app.

An "allocation" consists of
- an initial balance
- the rate of balance accrual
- the interval of balance accrual
where "balance" is in terms of FLOPs

SU serves as a meta-scheduler.

It keeps track of targets, allocations, balances, host assignments.

?? should allocation usage be measured by host/time,
or by work actually done (credit)?
Note: should work in a reasonable way even if jobs are very long

?? what if SU assigns a host to a project, and the project doesn't have work?
	SU should work in a reasonable way for sporadic workloads

-----------
Accounting
goals:
maintain daily history for
	total:
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# active hosts
		# active hosts w/ usable GPU
		# active users
		# jobs success
		# jobs fail
	project:
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# jobs success
		# jobs fail
	user:
		CPU flops delta and total
		GPU flops delta and total
		CPU time delta and total
		GPU time delta and total
		# jobs success
		# jobs fail

maintain per host (no history)
	CPU flops total
	CPU time total
	GPU flops total
	GPU time total
	has usable GPU
	# jobs success
	# jobs fail
	p_vm_extensions_disabled
		(should add this to standard code)

client changes:
	maintain
		per project
			total CPU and GPU time
			total CPU and GPU flops
				(take CPU throttling into account)
			# jobs success, fail
	report these in AM RPC
	report has usable GPU

Note: for convenience, flops is always measured in EC units

AM RPC handler
	compute deltas (relative to host record)
	sanity-check deltas
		time: #instances x dt
		flops: same, times fastest possible device (100 GFLOPS *256 CPU, 100 TFLOPS*8 GPU)
	update host record
	create accounting_user record if none
	atomically update delta, total fields of most recent account records for total, project, host

daily accounting program
	create new records for total, project, user
		new.delta = 0
		new.total = old.total + old.delta
	for total:
		compute # active hosts based on last RPC time
		group by userid to get # active users
		update # hosts w/ usable GPU
